orgchart有哪些参数及其含义：

data【json or String】：数据

pan 【boolean 默:flase】：通过鼠标拖放来控制OrgChart

zoom【boolean 默:false】：通过鼠标滚轮放大或缩放OrgChart

zoominLimit【number 默:7】：设置放大限制

zoomoutLimit【number 默:0.5】：设置缩放限制

direction【String 默:t2b】：T2B："从上到下"，B2T："从底到上"，L2R："左到右"，R2L："向左到右"

verticalLevel【integer(>=2)】：

toggleSiblingsResp【boolean 默:false】：通过单击左/右箭头分别显示/隐藏左/右兄弟节点

ajaxURL【json】：不同的优先级提供了发送不同节点的Ajax请求的URL

visibleLevel【number】：默认展开几级

nodeId【String 默:id】：将数据源的一个属性设置为每个OrgChart节点的唯一标识符。

nodeTitle【String 默:name】：将数据源的一个属性设置为OrgChart节点标题段的文本内容

nodeContent【String】：将数据源的一个属性设置为OrgChart节点的内容部分的文本内容。

nodeTemplate【function】：它是一个模板生成函数，用于定制任何复杂的节点内部结构

createNode【function】：它是用于自定义每个OrgCad节点的回调函数

parentNodeSymbol【String 默:fa-users】：使用图标暗示该节点有子节点

exportButton【boolean 默:false】：是否启用OrgChar的导出按钮

exportFilename【String 默:OrgChart】：当输出当前的OrgChart作为图片时，它是文件名。

exportFileextension【String 默:png】：可用的值是PNG和PDF。

chartClass【String】：当你想在一个页面上实例化多个orgcharts 时，你应该添加不同的类名来区分它们。

draggable【boolean 默:false】：用户可以拖动和删除OrgChart节点

dropCriteria【function】：用户可以构造自己的标准来限制拖动节点和删除区域之间的关系

initCompleted【function】：经常知道您的表何时已经完全初始化、数据加载和呈现，尤其是当使用Ajax数据源时


对于一个插件的的使用，主要是搞懂插件是如何封装的，作用在哪里，作用在哪里，我们需要哪些参数进去，所以我们可以通过给出的示例文件查看一下我们必须传进去的参数
，其次就是插件有些样式或者事件并不是我们想要的样式，所以我们大致理解插件的封装的过程才进行想要的过程才进行想要的效果的更改；
orgchart使用过程如下：
1.HTML页面定义一个div容器：
<div>
<div id="chart-container"> </div>
</div>
 
 
 1.在js中，我们需要讲所需要的数据以children的树形结构进行处理好，这样子orgchart会按照所处理好的数据进行展示。因为我们需要将后台读取的所有的节点根据parentid进行处理好，如：
 $scope.bindOrgChart = function(vtree,model){
     angular.forEach(vtree,function(val,key){
         if(val.NodeLeve<3){
             var result = $filter('filter')(model,function(fdata){
                 return fdata.ParentId == val.WorkNodeId;
             })
             if(result.length!=0){
                 val.children = result;
             }
             $scope.bindOrgcharts(val.children,model);
         }
     })
 }

 1.将数据处理之后这时候我们可以定义一个数组datascource存储我们需要展示的数据，其数据形式为:
 datascource.push({
     'name':$scope.itemNode[0].name,
     'children':$scope.getChildren($scope.itemNode[0].children)
 });

 $('#chart-container').orgchart({
     'data':datascource[0],
     'nodeContent':'title',
     'direction':'12r'
 });
 //自适应工作项orgchart高度
 $("#chart-container").height($("#chart-container.orgchart")[0].offsetWidth + 30);
在这里需要注意的是，在每次写入插件之前都要先清空一次对应的那个位置的div为空，不然会重复append之前的数据进去；
1.最后就说需要看一下这个框架的源代码，从而进行更改我们想要的效果，比如：由于点击展开或者收缩的时候，
比如：由于点击展开或者收缩节点的时候，不是通过店家箭头指示，而是通过点击对应事件的响应，在prepend方法之前用wrap()讲箭头
事件包含着节点，即：
if(Number(flags.substr(2,1)){
    $nodeDiv.children('.title').wrap('<div class="edg verticalEdge bottomEdge"></div>')
    .prepend('<div><i class="fa'+opts.parentNodeSymbol+'symbol"></i></div>');
})


